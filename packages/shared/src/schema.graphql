directive @hasRole(
  role: [RoleEnum]
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @isAuthenticated on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
enum AuthenticatedRequestStatus {
  OK
  FORBIDDEN
  NOT_FOUND
  BAD_REQUEST
  SERVER_INTERNAL_ERROR
}

type AuthMutation {
  signup(email: String!, password: String!): SignupOut!
}

type AuthQuery {
  signin(email: String!, password: String!): SigninOut!
  me: User!
  signout: SignoutOut!
}

type Breaker implements Module {
  type: ModuleType!
  title: String!
  description: String
  link: String!
  image: Image
  backgound: String
}

input CursorIn {
  limit: Int!
  offset: Int!
  cursor: String!
}

type CursorOut {
  count: Int!
  limit: Int!
  offset: Int!
  isEnd: Boolean!
  cursor: String!
}

type DesktopGame implements Game {
  id: ID!
  type: GameType!
  slug: String!
  title: String!
  summary: String!
  description: String!
  developer: String!
  publisher: String!
  genres: [Genre!]!
  releaseDate: String
  media: Media!
  tags: [Tag!]!
  requirements: [SystemRequirements!]!
  languages: Languages
  platforms: [Platform]!
  rating: Int!
  price: Float
  currency: String
  discount: Int
}

type FreeGameOffer {
  game: Game!
  image: Image
}

type FreeGamesGroup implements Module {
  type: ModuleType!
  title: String!
  games: [FreeGameOffer!]!
}

type FriendGame {
  game: Game!
  friends: [User!]!
}

interface Game {
  id: ID!
  type: GameType!
  slug: String!
  title: String!
  summary: String!
  description: String!
  developer: String!
  publisher: String!
  genres: [Genre!]!
  releaseDate: String
  media: Media!
  tags: [Tag!]!
  requirements: [SystemRequirements!]!
  languages: Languages
  platforms: [Platform]!
  rating: Int!
  price: Float
  currency: String
  discount: Int
}

enum GameType {
  Web
  Desktop
}

enum Genre {
  Board
  Cards
  Casino
  Farm
  Racing
  Shooter
  FindItems
  Puzzle
  RPG
  Simulator
  Strategy
}

type Image {
  url: String!
}

scalar ISO8601DateTime

type Languages {
  audio: [String!]!
  text: [String!]!
}

type Media {
  screenshots: [Image!]!
  trailers: [Video!]!
}

interface Module {
  type: ModuleType!
  title: String!
}

enum ModuleType {
  Breaker
  FreeGamesGroup
}

type Mutation {
  auth: AuthMutation
}

enum OrderIn {
  ASC
  DESC
}

enum Platform {
  Linux
  MacOS
  Windows
  Web
}

type Query {
  auth: AuthQuery
  store: StoreQuery
  viewer: ViewerQuery
}

type RequirementsSet {
  cpu: String
  diskSpace: String
  gpu: String
  os: String
  ram: String
}

enum RoleEnum {
  ADMIN
  USER
}

type SigninOut {
  status: SigninOutStatus!
  token: String!
}

enum SigninOutStatus {
  OK
  BAD_REQUEST
  SERVER_INTERNAL_ERROR
}

type SignoutOut {
  status: AuthenticatedRequestStatus!
}

type SignupOut {
  status: SignupOutStatus!
}

enum SignupOutStatus {
  OK
  BAD_REQUEST
  SERVER_INTERNAL_ERROR
  USER_EXISTS
}

type StoreFront {
  modules: [Module!]!
}

type StoreQuery {
  game(id: ID!): Game
  games(genre: Genre): [Game!]!
  module(id: ID!, locale: String): Module
  storeFront(locale: String): StoreFront
}

type SystemRequirements {
  platform: String!
  minimal: RequirementsSet
  recommended: RequirementsSet
}

type Tag {
  name: String!
  type: TagType!
}

enum TagType {
  genre
  common
}

type User {
  id: Int!
  email: String!
}

type Video {
  url: String!
}

type ViewerQuery {
  games: [Game!]!
  friendsGames: [FriendGame!]!
}

type WebGame implements Game {
  id: ID!
  type: GameType!
  slug: String!
  title: String!
  summary: String!
  description: String!
  developer: String!
  publisher: String!
  genres: [Genre!]!
  releaseDate: String
  media: Media!
  tags: [Tag!]!
  requirements: [SystemRequirements!]!
  languages: Languages
  platforms: [Platform]!
  rating: Int!
  price: Float
  currency: String
  discount: Int
}
